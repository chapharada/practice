import React, { useReducer, useEffect } from "react";

// 初期状態
const initialState = {
  data: [],
  loading: false,
  error: null,
};

// Reducer関数
const dataReducer = (state, action) => {
  switch (action.type) {
    case "FETCH_START":
      return { ...state, loading: true, error: null };
    case "FETCH_SUCCESS":
      return { ...state, loading: false, data: action.payload };
    case "FETCH_ERROR":
      return { ...state, loading: false, error: action.payload };
    case "ADD_ITEM":
    case "UPDATE_ITEM":
    case "DELETE_ITEM":
      return { ...state, loading: true }; // 状態をローディング中にする
    default:
      return state;
  }
};

const DataComponent = () => {
  const [state, dispatch] = useReducer(dataReducer, initialState);

  // データ取得
  const fetchData = async () => {
    dispatch({ type: "FETCH_START" });
    try {
      const response = await fetch("https://api.example.com/data");
      const result = await response.json();
      dispatch({ type: "FETCH_SUCCESS", payload: result });
    } catch (error) {
      dispatch({ type: "FETCH_ERROR", payload: error.message });
    }
  };

  // 初回マウント時やデータ更新後にデータを取得
  useEffect(() => {
    fetchData();
  }, []);

  // データの追加
  const addItem = async (newItem) => {
    dispatch({ type: "ADD_ITEM" }); // ローディング状態に切り替え
    await fetch("https://api.example.com/data", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(newItem),
    });
    fetchData(); // 更新後に再取得
  };

  // データの更新
  const updateItem = async (id, updatedItem) => {
    dispatch({ type: "UPDATE_ITEM" }); // ローディング状態に切り替え
    await fetch(`https://api.example.com/data/${id}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(updatedItem),
    });
    fetchData(); // 更新後に再取得
  };

  // データの削除
  const deleteItem = async (id) => {
    dispatch({ type: "DELETE_ITEM" }); // ローディング状態に切り替え
    await fetch(`https://api.example.com/data/${id}`, { method: "DELETE" });
    fetchData(); // 削除後に再取得
  };

  if (state.loading) return <p>Loading...</p>;
  if (state.error) return <p>Error: {state.error}</p>;

  return (
    <div>
      <ul>
        {state.data.map((item) => (
          <li key={item.id}>
            {item.name}{" "}
            <button onClick={() => deleteItem(item.id)}>Delete</button>
          </li>
        ))}
      </ul>
      <button onClick={() => addItem({ id: 5, name: "New Item" })}>
        Add Item
      </button>
    </div>
  );
};

export default DataComponent;
